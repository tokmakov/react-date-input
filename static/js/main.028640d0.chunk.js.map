{"version":3,"sources":["DateInput.js","index.js"],"names":["initTimestamp","Date","getTime","inputStyle","fontSize","padding","getValue","timestamp","current","day","getDate","toString","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","length","getStartEnd","input","split","positions","start","end","changeDate","datePart","value","date","setDate","setMonth","setFullYear","setHours","setMinutes","setPartSelection","setSelectionRange","DateInput","inputElem","useRef","useState","setTimestamp","useEffect","handleArrow","event","key","preventDefault","newTimestamp","handleArrowUpDown","handleArrowLeftRight","inputValue","type","ref","onClick","clicked","selectionEnd","selectionStart","caret","getClickedDatePart","onBlur","onKeyDown","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.028640d0.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst initTimestamp = (new Date()).getTime();\n\nconst inputStyle = {\n    fontSize: '20px',\n    padding: '5px',\n}\n\n// возвращает название месяца по его номеру: 0 — январь, 1 — февраль, …\nconst getMonth = (number) => {\n    const month = [\n        'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', \n        'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'\n    ]\n    return month[number];\n}\n\n// получает timestamp и возвращает строку вида «23 ноября 2021 09:36»\nconst getValue = (timestamp) => {\n    const current = new Date(timestamp);\n\n    let day = current.getDate().toString();\n    const month = current.getMonth();\n    const year = current.getFullYear().toString();\n    let hours = current.getHours().toString();\n    let minutes = current.getMinutes().toString();\n\n    if (day.length === 1) day = '0' + day;\n    if (hours.length === 1) hours = '0' + hours;\n    if (minutes.length === 1) minutes = '0' + minutes;\n\n    return day + ' ' + getMonth(month) + ' ' + year + ' ' + hours + ':' + minutes;\n}\n\n// позиции начала и конца для частей даты: день, месяц, год, часы и минуты\nconst getStartEnd = (input, timestamp) => {\n    const value = getValue(timestamp);\n    const [day, month, year, time] = value.split(' ');\n    const [hours, minutes] = time.split(':');\n\n    const positions = {}; // позиции начала и конца для частей даты\n    positions.day = {start: 0, end: day.length};\n    positions.month = {start: positions.day.end + 1, end: positions.day.end + 1 + month.length};\n    positions.year = {start: positions.month.end + 1, end: positions.month.end + 1 + year.length};\n    positions.hours = {start: positions.year.end + 1, end: positions.year.end + 1 + hours.length};\n    positions.minutes = {start: positions.hours.end + 1, end: positions.hours.end + 1 + minutes.length};\n\n    return positions;\n}\n\n// к timestamp прибавляет-вычитает день, месяц, год, час, минуту и возвращает новый timestamp\nconst changeDate = (timestamp, datePart, value = 1) => {\n    const date = new Date(timestamp);\n    switch (datePart) {\n        case 'day': date.setDate(date.getDate() + value); break;\n        case 'month': date.setMonth(date.getMonth() + value); break;\n        case 'year': date.setFullYear(date.getFullYear() + value); break;\n        case 'hours': date.setHours(date.getHours() + value); break;\n        case 'minutes': date.setMinutes(date.getMinutes() + value); break;\n    }\n    return date.getTime();\n}\n\n// возвращает название той части даты (день, месяц,год,часы,минуты), куда был клик\nconst getClickedDatePart = (input, timestamp) => {\n    input.selectionEnd = input.selectionStart;\n    // где начинается-заканчивается каждая часть даты\n    const positions = getStartEnd(input, timestamp)\n    // смотрим, над какой частью даты сейчас каретка\n    const caret = input.selectionStart;\n    if (caret >= positions.day.start && caret <= positions.day.end) return 'day';\n    if (caret >= positions.month.start && caret <= positions.month.end) return 'month';\n    if (caret >= positions.year.start && caret <= positions.year.end) return 'year';\n    if (caret >= positions.hours.start && caret <= positions.hours.end) return 'hours';\n    if (caret >= positions.minutes.start && caret <= positions.minutes.end) return 'minutes';\n    return null;\n}\n\n// устанавливает выделение внутри input-поля на ту часть даты, которая в datePart\nconst setPartSelection = (input, timestamp, datePart) => {\n    // где начинается-заканчивается каждая часть даты\n    const positions = getStartEnd(input, timestamp);\n\n    switch (datePart) { // какую чаcть даты нужно выделить\n        case 'day':\n            input.setSelectionRange(positions.day.start, positions.day.end); return;\n        case 'month':\n            input.setSelectionRange(positions.month.start, positions.month.end); return;\n        case 'year':\n            input.setSelectionRange(positions.year.start, positions.year.end); return;\n        case 'hours':\n            input.setSelectionRange(positions.hours.start, positions.hours.end); return;\n        case 'minutes':\n            input.setSelectionRange(positions.minutes.start, positions.minutes.end); return;\n    }\n}\n\n/*\n * Компонент для ввода даты — вводить что-то в input-поле нельзя, можно только кликнуть\n * в часть даты (день, месяц,год,часы,минуты) и дальше увеличивать-уменьшать стрелками\n */\nconst DateInput = () => {\n    const inputElem = useRef(null);\n    const datePart = useRef(null); // выделенная чать даты (day,month,year,hours,minutes)\n    const [timestamp, setTimestamp] = useState(initTimestamp);\n\n    useEffect(() => {\n        // после каждого ренедера выделяем ту чаcть даты, которая в datePart (если не null)\n        setPartSelection(inputElem.current, timestamp, datePart.current);\n    });\n\n    const handleClick = () => {\n        const clicked = getClickedDatePart(inputElem.current, timestamp);\n        if (clicked) { // если клик был на части даты, которую можно изменять\n            setPartSelection(inputElem.current, timestamp, clicked); // выделить эту часть\n        }\n        datePart.current = clicked;\n    }\n\n    const handleArrowUpDown = (key) => {\n        if (datePart.current) {\n            const newTimestamp = key === 'ArrowUp'\n                ? \n                changeDate(timestamp, datePart.current, 1)\n                :\n                changeDate(timestamp, datePart.current, -1);\n            setTimestamp(newTimestamp);\n        }\n    }\n\n    const handleArrowLeftRight = (key) => {\n        // если выделена часть даты — смещаем выделение влево-вправо\n        if (datePart.current) {\n            switch (datePart.current) {\n                case 'day': datePart.current = key === 'ArrowRight' ? 'month' : 'minutes'; break;\n                case 'month': datePart.current = key === 'ArrowRight' ? 'year' : 'day'; break;\n                case 'year': datePart.current = key === 'ArrowRight' ? 'hours' : 'month'; break;\n                case 'hours': datePart.current = key === 'ArrowRight' ? 'minutes' : 'year'; break;\n                case 'minutes': datePart.current = key === 'ArrowRight' ? 'day' : 'hours'; break;\n            }\n            setPartSelection(inputElem.current, timestamp, datePart.current)\n        }\n    }\n\n    const handleArrow = (event) => {\n        if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n            event.preventDefault();\n            handleArrowUpDown(event.key);\n        }\n        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n            event.preventDefault();\n            handleArrowLeftRight(event.key);\n        }\n    }\n\n    const inputValue = getValue(timestamp); // строка, которая вставляется в поле input\n\n    return (\n        <p>\n            <input\n                type=\"text\"\n                ref={inputElem}\n                onClick={handleClick}\n                onBlur={() => datePart.current = null}\n                onKeyDown={event => handleArrow(event)}\n                value={inputValue}\n                style={inputStyle}\n            />\n        </p>\n    )\n}\n\nexport default DateInput;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DateInput from './DateInput';\n\nReactDOM.render(\n    <React.StrictMode>\n        <DateInput />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}